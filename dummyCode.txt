<<<<<<< HEAD
<%- include('../layouts/header.ejs') %>
<%- include('../layouts/vendor-dashboard.ejs') %>

=======
<%- include('../../layouts/header.ejs') %> <%-
include('../../layouts/sidebar.ejs') %>
>>>>>>> 6ac743904d615d6510c27389ccf68042f956a8d0

<div class="container-scroller">
  <div class="container-fluid page-body-wrapper">
    <div class="main-panel">
      <div class="content-wrapperrr">
        <div class="page-header">
          <h3 class="page-title"> Developer Dashboard </h3>
        </div>

        <!-- Add button to toggle developer form -->
        <div class="mb-3">
          <button id="toggleDeveloperForm" class="btn btn-primary">Add Developer</button>
        </div>

        <!-- Developer form initially hidden -->
        <div id="developerFormContainer" style="display: none;">
          <div class="card">
            <div class="card-body">
              <h4 class="card-title">Create Developer</h4>
              <form id="createDeveloperForm">
                <!-- ... (existing code) -->
              </form>
            </div>
          </div>
        </div>

        <div class="card mt-3">
          <div class="card-body">
            <h4 class="card-title">All Developers</h4>
            <div class="table-responsive">
              <table class="table table-striped" id="developerTable">
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Experience</th>
                    <th>Technology</th>
                    <th>Resume</th>
                    <th>Available</th>
                    <th>Rate</th>
                    <th>Action</th>
                  </tr>
                </thead>
                <tbody id="developerTableBody">
                 

                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<<<<<<< HEAD
<!-- Modal for updating developer -->
=======
<!-- Modal for updating technology -->
<div class="modal mt-4" id="updateTechnologyModal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Update Technology</h5>
        <button
          type="button"
          class="close"
          data-dismiss="modal"
          aria-label="Close"
          id="closeUpdateModalButton"
        >
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="updateTechnologyForm">
          <div class="form-group">
            <label for="updatedTechnologyName">Technology Name</label>
            <input
              type="text"
              class="form-control"
              id="updatedTechnologyName"
              required
            />
          </div>
          <button type="submit" class="btn btn-primary">
            Update Technology
          </button>
        </form>
      </div>
    </div>
  </div>
</div>
>>>>>>> 6ac743904d615d6510c27389ccf68042f956a8d0


<%- include('../layouts/footer.ejs') %>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const token = localStorage.getItem("vendorToken");
    const toggleDeveloperFormButton = document.getElementById('toggleDeveloperForm');
    const developerFormContainer = document.getElementById('developerFormContainer');
    const createDeveloperForm = document.getElementById('createDeveloperForm');
    const developerTableBody = document.getElementById('developerTableBody');

<<<<<<< HEAD
    toggleDeveloperFormButton.addEventListener('click', toggleDeveloperForm);
    createDeveloperForm.addEventListener('submit', function (event) {
=======
  function getAllTechnologies() {
    fetch("http://localhost:3000/technology/get-technology")
      .then((response) => response.json())
      .then((data) => {
        displayTechnologies(data.technology);
      })
      .catch((error) => {
        console.error("Error fetching data:", error);
      });
  }

  // Function to display technologies in the table
  function displayTechnologies(technologies) {
    var tableBody = document.getElementById("technologyTableBody");
    tableBody.innerHTML = "";

    technologies.forEach((technology) => {
      var newRow = tableBody.insertRow(tableBody.rows.length);

      var cell1 = newRow.insertCell(0);
      var cell2 = newRow.insertCell(1);
      var cell3 = newRow.insertCell(2);

      cell1.innerHTML = technology._id;
      cell2.innerHTML = technology.name;
      cell3.innerHTML =
        '<button class="btn btn-warning button-all" onclick="updateTechnology(this)">Update</button>' +
        '<button class="btn btn-danger ml-2" onclick="deleteTechnology(this)">Delete</button>';
    });
  }

  // Toggle visibility of technology form
  document
    .getElementById("toggleTechnologyForm")
    .addEventListener("click", function () {
      var formContainer = document.getElementById("technologyFormContainer");
      formContainer.style.display =
        formContainer.style.display === "none" ? "block" : "none";
    });

  // Handle technology form submission
  document
    .getElementById("addTechnologyForm")
    .addEventListener("submit", function (event) {
>>>>>>> 6ac743904d615d6510c27389ccf68042f956a8d0
      event.preventDefault();
      addDeveloper();
    });

    fetchDevelopers();

    function toggleDeveloperForm() {
      developerFormContainer.style.display = developerFormContainer.style.display === 'none' ? 'block' : 'none';
    }

    function fetchDevelopers() {
      fetch('http://localhost:3000/developer/get-devAll', {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
<<<<<<< HEAD
        .then(response => response.json())
        .then(data => {
          displayDevelopers(data.developers);
          // Initialize DataTable after populating the table
          $('#developerTable').DataTable();
        })
        .catch(handleError);
    }

    function displayDevelopers(developers) {
      developerTableBody.innerHTML = '';

      developers.forEach(developer => {
        const newRow = developerTableBody.insertRow(developerTableBody.rows.length);
        newRow.id = `developerRow_${developer._id}`;

        const cells = [
          developer._id,
          developer.name,
          developer.experience,
          developer.technology.join(', '),
          developer.resume,
          developer.available ? 'Yes' : 'No',
          developer.rate
        ];

        cells.forEach((cell, index) => {
          const newCell = newRow.insertCell(index);
          newCell.innerHTML = cell;
        });

        const actionCell = newRow.insertCell(cells.length);
        actionCell.innerHTML = `<button class="btn btn-warning mx-3" onclick="updateDeveloper('${developer._id}')">Update</button>` +
          `<button class="btn btn-danger ml-2" onclick="deleteDeveloper('${developer._id}')">Delete</button>`;
      });
    }
=======
      .catch((error) => {
        console.error("Error adding technology:", error);
      })
      .finally(() => {
        // Clear the form field
        document.getElementById("technologyName").value = "";

        // Hide the form after submission
        document.getElementById("technologyFormContainer").style.display =
          "none";
      });
  }

  // Function to add technology to the table
  function addTechnologyToTable(techId, techName) {
    console.log("resIDDDDDD:::", techId);
    var tableBody = document.getElementById("technologyTableBody");
    var newRow = tableBody.insertRow(tableBody.rows.length);

    var cell1 = newRow.insertCell(0);
    var cell2 = newRow.insertCell(1);
    var cell3 = newRow.insertCell(2);

    cell1.innerHTML = techId; // Assuming the ID is provided by the server
    cell2.innerHTML = techName;
    cell3.innerHTML =
      '<button class="btn btn-warning" onclick="updateTechnology(this)">Update</button>' +
      '<button class="btn btn-danger ml-2" onclick="deleteTechnology(this)">Delete</button>';
  }

  // Function to update technology
  function updateTechnology(button) {
    var row = button.parentNode.parentNode;
    var techId = row.cells[0].innerHTML;
    // console.log("techIdtechIdtechIdtechId", techId)
    var techName = row.cells[1].innerHTML;

    // Set the current technology name in the modal input field
    document.getElementById("updatedTechnologyName").value = techName;

    // Show the updateTechnologyModal
    $("#updateTechnologyModal").modal("show");

    // Handle form submission
    document
      .getElementById("updateTechnologyForm")
      .addEventListener("submit", function (event) {
        event.preventDefault();

        var newTechName = document.getElementById(
          "updatedTechnologyName"
        ).value;

        // Send AJAX request to update technology in the server
        fetch(`http://localhost:3000/technology/edit-technology/${techId}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ name: newTechName }),
        })
          .then((response) => response.json())
          .then((data) => {
            // console.log("techcccc", techId);
            // console.log('Update response:', data);
            if (data.success) {
              // Update the table with the updated technology
              row.cells[1].innerHTML = newTechName;
            } else {
              console.error("Failed to update technology:", data.message);
            }
          })
          .catch((error) => {
            console.error("Error updating technology:", error);
          })
          .finally(() => {
            // Hide the modal after submission
            $("#updateTechnologyModal").modal("hide");
          });
      });
    document
      .getElementById("closeUpdateModalButton")
      .addEventListener("click", function () {
        $("#updateTechnologyModal").modal("hide");
      });
  }
>>>>>>> 6ac743904d615d6510c27389ccf68042f956a8d0

    function addDeveloper() {
      // ... (existing code)
    }

<<<<<<< HEAD
    function updateDeveloper(developerId) {
      // ... (existing code)
    }

    function deleteDeveloper(developerId) {
      // ... (existing code)
    }

    function handleApiResponse(data) {
      console.log(data);
    }

    function handleApiError(error) {
      console.error('API Request Error:', error);
    }

    if (!tokens) {
      window.location.href = "/login";
    }
  });
</script>






























KEVAL BHAI CODEEEEEEEEEEEEEEEEEEEEEE


<%- include('../layouts/header.ejs') %>
  <%- include('../layouts/vendor-dashboard.ejs') %>

    <div class="container-scroller">
      <div class="container-fluid page-body-wrapper">
        <div class="main-panel">
          <div class="content-wrapperrr">
            <div class="page-header">
              <h3 class="page-title"> Developer Dashboard </h3>
            </div>

            <!-- Add button to toggle developer form -->
            <div class="mb-3">
              <button id="toggleDeveloperForm" class="btn btn-primary">Add Developer</button>
            </div>

            <!-- Developer form initially hidden -->
            <div id="developerFormContainer" style="display: none;">
              <div class="card">
                <div class="card-body">
                  <h4 class="card-title">Create Developer</h4>
                  <form id="createDeveloperForm">
                    <div class="row">
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="developerName">Name</label>
                          <input type="text" class="form-control" id="developerName" placeholder="Enter name" required>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="experience">Experience</label>
                          <input type="number" class="form-control" id="experience" placeholder="Enter experience"
                            required>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="technology">Technology</label>
                          <input type="text" class="form-control" id="technology" placeholder="Enter technology"
                            required>
                          <small class="form-text text-muted">Enter technologies as a comma-separated list (e.g.,
                            Node.js, Laravel)</small>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="resume">Resume URL</label>
                          <input type="url" class="form-control" id="resume" placeholder="Enter resume URL">
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-check">
                          <input type="checkbox" class="form-check-input" id="available">
                          <label class="form-check-label" for="available">Available</label>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="rate">Rate</label>
                          <input type="number" class="form-control" id="rate" placeholder="Enter hourly rate">
                        </div>
                      </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Create Developer</button>
                  </form>
                </div>
              </div>
            </div>

            <div class="card mt-3">
              <div class="card-body">
                <h4 class="card-title">All Developers</h4>
                <div class="table-responsive">
                  <table class="table table-striped" id="developerTable">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Experience</th>
                        <th>Technology</th>
                        <th>Resume</th>
                        <th>Available</th>
                        <th>Rate</th>
                        <th>Action</th>
                      </tr>
                    </thead>
                    <tbody id="developerTableBody">
                      <!-- Table rows will be dynamically populated here -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal for updating developer -->
    <div class="modal fade" id="updateDeveloperModal" tabindex="-1" role="dialog"
      aria-labelledby="updateDeveloperModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="updateDeveloperModalLabel">Update Developer</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="updateDeveloperForm">
              <div class="form-group">
                <label for="updatedDeveloperName">Name</label>
                <input type="text" class="form-control" id="updatedDeveloperName" required>
              </div>
              <div class="form-group">
                <label for="updatedExperience">Experience</label>
                <input type="number" class="form-control" id="updatedExperience" required>
              </div>
              <div class="form-group">
                <label for="updatedTechnology">Technology</label>
                <input type="text" class="form-control" id="updatedTechnology" required>
              </div>
              <div class="form-group">
                <label for="updatedResume">Resume URL</label>
                <input type="url" class="form-control" id="updatedResume">
              </div>
              <div class="form-check">
                <input type="checkbox" class="form-check-input" id="updatedAvailable">
                <label class="form-check-label" for="updatedAvailable">Available</label>
              </div>
              <div class="form-group">
                <label for="updatedRate">Rate</label>
                <input type="number" class="form-control" id="updatedRate">
              </div>
              <button type="submit" class="btn btn-primary">Update Developer</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <%- include('../layouts/footer.ejs') %>
    
      <script>

        const tokens = localStorage.getItem("vendorToken");

       
        function updateDeveloper(developerId) {
          console.log(developerId)
          fetch(`http://localhost:3000/developer/get-dev/${developerId}`, {
            headers: {
              Authorization: `Bearer ${tokens}`,
            },
          })
            .then(response => response.json())
            .then(data => {
              const updatedDeveloperNameInput = document.getElementById('updatedDeveloperName');
              const updatedExperienceInput = document.getElementById('updatedExperience');
              const updatedTechnologyInput = document.getElementById('updatedTechnology');
              const updatedResumeInput = document.getElementById('updatedResume');
              const updatedAvailableInput = document.getElementById('updatedAvailable');
              const updatedRateInput = document.getElementById('updatedRate');

              updatedDeveloperNameInput.value = data.developer.name;
              updatedExperienceInput.value = data.developer.experience;
              updatedTechnologyInput.value = data.developer.technology.join(', ');
              updatedResumeInput.value = data.developer.resume;
              updatedAvailableInput.checked = data.developer.available;
              updatedRateInput.value = data.developer.rate;

              $('#updateDeveloperModal').modal('show');
            })
            .catch(handleError);

          document.getElementById('updateDeveloperForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const updatedDeveloperName = document.getElementById('updatedDeveloperName').value;
            const updatedExperience = document.getElementById('updatedExperience').value;
            const updatedTechnology = document.getElementById('updatedTechnology').value.split(',').map(item => item.trim());
            const updatedResume = document.getElementById('updatedResume').value;
            const updatedAvailable = document.getElementById('updatedAvailable').checked;
            const updatedRate = document.getElementById('updatedRate').value;

            const requestData = {
              name: updatedDeveloperName,
              experience: updatedExperience,
              technology: updatedTechnology,
              resume: updatedResume,
              available: updatedAvailable,
              rate: updatedRate
            };
            console.log("requestData", requestData);
            fetch(`http://localhost:3000/developer/update-dev/${developerId}`, {
              method: 'PUT',
              headers: {
                Authorization: `Bearer ${tokens}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestData),
            })
              .then(response => response.json())
              .then(data => {
                handleApiResponse(data);
                // fetchDevelopers();
                $('#updateDeveloperModal').modal('hide');
              })
              .catch(handleApiError);
          });

        }

        function handleApiResponse(data) {
          console.log(data);
        }

        function handleApiError(error) {
          console.error('API Request Error:', error);
        }

        function deleteDeveloper(developerId) {
          fetch(`http://localhost:3000/developer/delete-dev/${developerId}`, {
            method: 'DELETE',
            headers: {
              Authorization: `Bearer ${tokens}`,
              'Content-Type': 'application/json',
            },
          })
            .then(response => response.json())
            .then(data => {
              handleApiResponse(data);
              // fetchDevelopers();
            })
            .catch(handleError);
        }

        document.addEventListener('DOMContentLoaded', function () {
          const token = localStorage.getItem("vendorToken");
          const toggleDeveloperFormButton = document.getElementById('toggleDeveloperForm');
          const developerFormContainer = document.getElementById('developerFormContainer');
          const createDeveloperForm = document.getElementById('createDeveloperForm');
          const developerTableBody = document.getElementById('developerTableBody');

          toggleDeveloperFormButton.addEventListener('click', toggleDeveloperForm);
          createDeveloperForm.addEventListener('submit', function (event) {
            event.preventDefault();
            addDeveloper();
          });


          fetchDevelopers();

          function toggleDeveloperForm() {
            developerFormContainer.style.display = developerFormContainer.style.display === 'none' ? 'block' : 'none';
          }

          function fetchDevelopers() {
            fetch('http://localhost:3000/developer/get-devAll', {
              headers: {
                Authorization: `Bearer ${token}`,
              },
            })
              .then(response => response.json())
              .then(data => {
                displayDevelopers(data.developers);
              })
              .catch(handleError);
          }

          function displayDevelopers(developers) {
            developerTableBody.innerHTML = '';

            developers.forEach(developer => {
              const newRow = developerTableBody.insertRow(developerTableBody.rows.length);
              newRow.id = `developerRow_${developer._id}`;

              const cells = [
                developer._id,
                developer.name,
                developer.experience,
                developer.technology.join(', '),
                developer.resume,
                developer.available ? 'Yes' : 'No',
                developer.rate
              ];

              cells.forEach((cell, index) => {
                const newCell = newRow.insertCell(index);
                newCell.innerHTML = cell;
              });

              const actionCell = newRow.insertCell(cells.length);
              actionCell.innerHTML = `<button class="btn btn-warning mx-3" onclick="updateDeveloper('${developer._id}')">Update</button>` +
                `<button class="btn btn-danger ml-2" onclick="deleteDeveloper('${developer._id}')">Delete</button>`;
            });
          }

          function addDeveloper() {
            const developerName = document.getElementById('developerName').value;
            const experience = document.getElementById('experience').value;
            const technology = document.getElementById('technology').value.split(',').map(item => item.trim());
            const resume = document.getElementById('resume').value;
            const available = document.getElementById('available').checked;
            const rate = document.getElementById('rate').value;

            const requestData = {
              name: developerName,
              experience: experience,
              technology: technology,
              resume: resume,
              available: available,
              rate: rate
            };

            fetch('http://localhost:3000/developer/add-dev', {
              method: 'POST',
              headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestData),
            })
              .then(response => response.json())
              .then(data => {
                handleApiResponse(data);
                fetchDevelopers();
                toggleDeveloperForm();
              })
              .catch(handleApiError);
          }

          const tokens = localStorage.getItem("vendorToken");

          if (!tokens) {
            window.location.href = "/login";
          }
        });
      </script>
=======
    // Send AJAX request to delete technology in the server
    fetch(`http://localhost:3000/technology/delete-technology/${techId}`, {
      method: "DELETE",
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          // Remove the row from the table
          row.parentNode.removeChild(row);
        } else {
          console.error("Failed to delete technology:", data.message);
        }
      })
      .catch((error) => {
        console.error("Error deleting technology:", error);
      });
  }
</script>
>>>>>>> 6ac743904d615d6510c27389ccf68042f956a8d0
