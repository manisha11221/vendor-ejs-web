<%- include('../layouts/header.ejs') %>
  <%- include('../layouts/vendor-dashboard.ejs') %>


    <div class="container-scroller">
      <div class="container-fluid page-body-wrapper">
        <div class="main-panel">
          <div class="content-wrapperrr">
            <div class="page-header">
              <h3 class="page-title"> Developer Dashboard </h3>
            </div>

            <!-- Add button to toggle developer form -->
            <div class="mb-3">
              <button id="toggleDeveloperForm" class="btn btn-primary">Add Developer</button>
            </div>

            <!-- Developer form initially hidden -->
            <div id="developerFormContainer" style="display: none;">
              <div class="card">
                <div class="card-body">
                  <h4 class="card-title">Create Developer</h4>
                  <form id="createDeveloperForm">
                    <div class="row">
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="developerName">Name</label>
                          <input type="text" class="form-control" id="developerName" placeholder="Enter name" required>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="experience">Experience</label>
                          <input type="number" class="form-control" id="experience" placeholder="Enter experience"
                            required>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="technology">Technology</label>
                          <input type="text" class="form-control" id="technology" placeholder="Enter technology"
                            required>
                          <small class="form-text text-muted">Enter technologies as a comma-separated list (e.g.,
                            Node.js, Laravel)</small>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="resume">Resume URL</label>
                          <input type="url" class="form-control" id="resume" placeholder="Enter resume URL">
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-check">
                          <input type="checkbox" class="form-check-input" id="available">
                          <label class="form-check-label" for="available">Available</label>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="rate">Rate</label>
                          <input type="number" class="form-control" id="rate" placeholder="Enter hourly rate">
                        </div>
                      </div>
                    </div>
                    <button type="submit" class="btn btn-primary">Create Developer</button>
                  </form>
                </div>
              </div>
            </div>

            <div class="card mt-3 mb-5">
              <div class="card-body">
                <h4 class="card-title">All Developers</h4>
                <div class="table-responsive">
                  <table class="table table-striped" id="developerTable">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Experience</th>
                        <th>Technology</th>
                        <th>Resume</th>
                        <th>Available</th>
                        <th>Rate</th>
                        <th>Action</th>
                      </tr>
                    </thead>
                    <tbody id="developerTableBody">


                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

  

    <%- include('../layouts/footer.ejs') %>

      <script>
        const tokens = localStorage.getItem("vendorToken");

        function handleError(error) {
          console.error('Error:', error);
        }

        function updateDeveloper(developerId) {
          console.log(developerId)
          fetch(`http://localhost:3000/developer/get-dev/${developerId}`, {
            headers: {
              Authorization: `Bearer ${tokens}`,
            },
          })
            .then(response => response.json())
            .then(data => {
              const updatedDeveloperNameInput = document.getElementById('updatedDeveloperName');
              const updatedExperienceInput = document.getElementById('updatedExperience');
              const updatedTechnologyInput = document.getElementById('updatedTechnology');
              const updatedResumeInput = document.getElementById('updatedResume');
              const updatedAvailableInput = document.getElementById('updatedAvailable');
              const updatedRateInput = document.getElementById('updatedRate');

              updatedDeveloperNameInput.value = data.developer.name;
              updatedExperienceInput.value = data.developer.experience;
              updatedTechnologyInput.value = data.developer.technology.join(', ');
              updatedResumeInput.value = data.developer.resume;
              updatedAvailableInput.checked = data.developer.available;
              updatedRateInput.value = data.developer.rate;

              $('#updateDeveloperModal').modal('show');
            })
            .catch(handleError);

          document.getElementById('updateDeveloperForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const updatedDeveloperName = document.getElementById('updatedDeveloperName').value;
            const updatedExperience = document.getElementById('updatedExperience').value;
            const updatedTechnology = document.getElementById('updatedTechnology').value.split(',').map(item => item.trim());
            const updatedResume = document.getElementById('updatedResume').value;
            const updatedAvailable = document.getElementById('updatedAvailable').checked;
            const updatedRate = document.getElementById('updatedRate').value;

            const requestData = {
              name: updatedDeveloperName,
              experience: updatedExperience,
              technology: updatedTechnology,
              resume: updatedResume,
              available: updatedAvailable,
              rate: updatedRate
            };
            console.log("requestData", requestData);
            fetch(`http://localhost:3000/developer/update-dev/${developerId}`, {
              method: 'PUT',
              headers: {
                Authorization: `Bearer ${tokens}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestData),
            })
              .then(response => response.json())
              .then(data => {
                handleApiResponse(data);
                // fetchDevelopers();
                $('#updateDeveloperModal').modal('hide');
              })
              .catch(handleApiError);
          });

        }

        function handleApiResponse(data) {
          console.log(data);
        }

        function handleApiError(error) {
          console.error('API Request Error:', error);
        }

        function deleteDeveloper(developerId) {
          fetch(`http://localhost:3000/developer/delete-dev/${developerId}`, {
            method: 'DELETE',
            headers: {
              Authorization: `Bearer ${tokens}`,
              'Content-Type': 'application/json',
            },
          })
            .then(response => response.json())
            .then(data => {
              handleApiResponse(data);
              // fetchDevelopers();
            })
            .catch(handleError);
        }

        document.addEventListener('DOMContentLoaded', function () {
          const token = localStorage.getItem("vendorToken");
          const toggleDeveloperFormButton = document.getElementById('toggleDeveloperForm');
          const developerFormContainer = document.getElementById('developerFormContainer');
          const createDeveloperForm = document.getElementById('createDeveloperForm');
          const developerTableBody = document.getElementById('developerTableBody');

          toggleDeveloperFormButton.addEventListener('click', toggleDeveloperForm);
          createDeveloperForm.addEventListener('submit', function (event) {
            event.preventDefault();
            addDeveloper();
          });

          fetchDevelopers();

          function toggleDeveloperForm() {
            developerFormContainer.style.display = developerFormContainer.style.display === 'none' ? 'block' : 'none';
          }

          function fetchDevelopers() {
            fetch('http://localhost:3000/developer/get-devAll', {
              headers: {
                Authorization: `Bearer ${token}`,
              },
            })
              .then(response => response.json())
              .then(data => {
                displayDevelopers(data.developers);
                // Initialize DataTable after populating the table
                $('#developerTable').DataTable();
              })
              .catch(handleError);
          }

          function displayDevelopers(developers) {
            developerTableBody.innerHTML = '';

            developers.forEach(developer => {
              const newRow = developerTableBody.insertRow(developerTableBody.rows.length);
              newRow.id = `developerRow_${developer._id}`;

              const cells = [
                developer._id,
                developer.name,
                developer.experience,
                developer.technology.join(', '),
                developer.resume,
                developer.available ? 'Yes' : 'No',
                developer.rate
              ];

              cells.forEach((cell, index) => {
                const newCell = newRow.insertCell(index);
                newCell.innerHTML = cell;
              });

              const actionCell = newRow.insertCell(cells.length);
              actionCell.innerHTML = `<button class="btn btn-warning mx-3" onclick="updateDeveloper('${developer._id}')">Update</button>` +
                `<button class="btn btn-danger ml-2" onclick="deleteDeveloper('${developer._id}')">Delete</button>`;
            });
          }

          function addDeveloper() {
            const developerName = document.getElementById('developerName').value;
            const experience = document.getElementById('experience').value;
            const technology = document.getElementById('technology').value.split(',').map(item => item.trim());
            const resume = document.getElementById('resume').value;
            const available = document.getElementById('available').checked;
            const rate = document.getElementById('rate').value;

            const requestData = {
              name: developerName,
              experience: experience,
              technology: technology,
              resume: resume,
              available: available,
              rate: rate
            };

            fetch('http://localhost:3000/developer/add-dev', {
              method: 'POST',
              headers: {
                Authorization: `Bearer ${token}`,
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestData),
            })
              .then(response => response.json())
              .then(data => {
                handleApiResponse(data);
                fetchDevelopers();
                toggleDeveloperForm();
              })
              .catch(handleApiError);
          }

          if (!tokens) {
            window.location.href = "/login";
          }
        });
      </script>