<%- include('../layouts/header.ejs') %>
<%- include('../layouts/vendor-dashboard.ejs') %>

    <div class="container-scroller">
      <div class="container-fluid page-body-wrapper">
        <div class="main-panel">
          <div class="content-wrapperrr">
            <div class="page-header">
              <h3 class="page-title"> Developer Dashboard </h3>
            </div>

            <!-- Add button to toggle developer form -->
            <div class="mb-3">
              <button id="toggleDeveloperForm" class="btn btn-primary">Add Developer</button>
            </div>

            <!-- Developer form initially hidden -->
            <div id="developerFormContainer" style="display: none;">
              <div class="card">
                <div class="card-body">
                  <h4 class="card-title">Create Developer</h4>
                  <form id="createDeveloperForm">
                    <div class="row">
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="developerName">Name</label>
                          <input type="text" class="form-control" id="developerName" placeholder="Enter name" required>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="experience">Experience</label>
                          <input type="number" class="form-control" id="experience" placeholder="Enter experience"
                            required>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="technology">Technology</label>
                          <input type="text" class="form-control" id="technology" placeholder="Enter technology"
                            required>
                          <small class="form-text text-muted">Enter technologies as a comma-separated list (e.g.,
                            Node.js, Laravel)</small>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="resume">Resume URL</label>
                          <input type="url" class="form-control" id="resume" placeholder="Enter resume URL">
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-check">
                          <input type="checkbox" class="form-check-input" id="available">
                          <label class="form-check-label" for="available">Available</label>
                        </div>
                      </div>
                      <div class="col-md-6">
                        <div class="form-group">
                          <label for="rate">Rate</label>
                          <input type="number" class="form-control" id="rate" placeholder="Enter hourly rate">
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="technology">Technology</label>
                      <input
                        type="text"
                        class="form-control"
                        id="technology"
                        placeholder="Enter technology"
                        required
                      />
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="form-group">
                      <label for="experience">Experience</label>
                      <input
                        type="text"
                        class="form-control"
                        id="experience"
                        placeholder="Enter experience"
                        required
                      />
                    </div>
                  </div>
                </div>
                <button type="submit" class="btn btn-primary">
                  Create Developer
                </button>
              </form>
            </div>
          </div>
        </div>

            <div class="card mt-3">
              <div class="card-body">
                <h4 class="card-title">All Developers</h4>
                <div class="table-responsive">
                  <table class="table table-striped" id="developerTable">
                    <thead>
                      <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Experience</th>
                        <th>Technology</th>
                        <th>Resume</th>
                        <th>Available</th>
                        <th>Rate</th>
                        <th>Action</th>
                      </tr>
                    </thead>
                    <tbody id="developerTableBody">
                      <!-- Table rows will be dynamically populated here -->
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

    <!-- Modal for updating developer -->
    <div class="modal fade" id="updateDeveloperModal" tabindex="-1" role="dialog"
      aria-labelledby="updateDeveloperModalLabel" aria-hidden="true">
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="updateDeveloperModalLabel">Update Developer</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <form id="updateDeveloperForm">
              <div class="form-group">
                <label for="updatedDeveloperName">Name</label>
                <input type="text" class="form-control" id="updatedDeveloperName" required>
              </div>
              <div class="form-group">
                <label for="updatedExperience">Experience</label>
                <input type="number" class="form-control" id="updatedExperience" required>
              </div>
              <div class="form-group">
                <label for="updatedTechnology">Technology</label>
                <input type="text" class="form-control" id="updatedTechnology" required>
              </div>
              <div class="form-group">
                <label for="updatedResume">Resume URL</label>
                <input type="url" class="form-control" id="updatedResume">
              </div>
              <div class="form-check">
                <input type="checkbox" class="form-check-input" id="updatedAvailable">
                <label class="form-check-label" for="updatedAvailable">Available</label>
              </div>
              <div class="form-group">
                <label for="updatedRate">Rate</label>
                <input type="number" class="form-control" id="updatedRate">
              </div>
              <button type="submit" class="btn btn-primary">Update Developer</button>
            </form>
          </div>
        </div>
      </div>
    </div>

    <%- include('../layouts/footer.ejs') %>
    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const toggleDeveloperFormButton = document.getElementById('toggleDeveloperForm');
        const developerFormContainer = document.getElementById('developerFormContainer');
        const createDeveloperForm = document.getElementById('createDeveloperForm');
        const developerTableBody = document.getElementById('developerTableBody');
    
        toggleDeveloperFormButton.addEventListener('click', toggleDeveloperForm);
    
        createDeveloperForm.addEventListener('submit', function (event) {
          event.preventDefault();
          addDeveloper();
        });
    
        fetchDevelopers();
    
        function toggleDeveloperForm() {
          developerFormContainer.style.display = developerFormContainer.style.display === 'none' ? 'block' : 'none';
        }
    
        function fetchDevelopers() {
          fetch('http://localhost:3000/developer/get-devAll')
            .then(response => response.json())
            .then(data => {
              displayDevelopers(data.developers);
            })
            .catch(handleError);
        }
    
        function displayDevelopers(developers) {
          developerTableBody.innerHTML = '';
    
          developers.forEach(developer => {
            const newRow = developerTableBody.insertRow(developerTableBody.rows.length);
            newRow.id = `developerRow_${developer._id}`;
    
            const cells = [
              developer._id,
              developer.name,
              developer.experience,
              developer.technology.join(', '),
              developer.resume,
              developer.available ? 'Yes' : 'No',
              developer.rate
            ];
    
            cells.forEach((cell, index) => {
              const newCell = newRow.insertCell(index);
              newCell.innerHTML = cell;
            });
    
            const actionCell = newRow.insertCell(cells.length);
            actionCell.innerHTML = `<button class="btn btn-warning" onclick="updateDeveloper('${developer._id}')">Update</button>` +
              `<button class="btn btn-danger ml-2" onclick="deleteDeveloper('${developer._id}')">Delete</button>`;
          });
        }
    
        function addDeveloper() {
          const developerName = document.getElementById('developerName').value;
          const experience = document.getElementById('experience').value;
          const technology = document.getElementById('technology').value.split(',').map(item => item.trim());
          const resume = document.getElementById('resume').value;
          const available = document.getElementById('available').checked;
          const rate = document.getElementById('rate').value;
    
          const requestData = {
            name: developerName,
            experience: experience,
            technology: technology,
            resume: resume,
            available: available,
            rate: rate
          };
    
          fetch('http://localhost:3000/developer/add-dev', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(requestData),
          })
            .then(response => response.json())
            .then(data => {
              handleApiResponse(data);
              fetchDevelopers();
              toggleDeveloperForm();
            })
            .catch(handleApiError);
        }
    
        function updateDeveloper(developerId) {
          fetch(`http://localhost:3000/developer/get-dev/${developerId}`)
            .then(response => response.json())
            .then(data => {
              document.getElementById('updatedDeveloperName').value = data.developer.name;
              document.getElementById('updatedExperience').value = data.developer.experience;
              document.getElementById('updatedTechnology').value = data.developer.technology.join(', ');
              document.getElementById('updatedResume').value = data.developer.resume;
              document.getElementById('updatedAvailable').checked = data.developer.available;
              document.getElementById('updatedRate').value = data.developer.rate;
    
              $('#updateDeveloperModal').modal('show');
            })
            .catch(handleError);
    
          document.getElementById('updateDeveloperForm').addEventListener('submit', function (event) {
            event.preventDefault();
    
            const updatedDeveloperName = document.getElementById('updatedDeveloperName').value;
            const updatedExperience = document.getElementById('updatedExperience').value;
            const updatedTechnology = document.getElementById('updatedTechnology').value.split(',').map(item => item.trim());
            const updatedResume = document.getElementById('updatedResume').value;
            const updatedAvailable = document.getElementById('updatedAvailable').checked;
            const updatedRate = document.getElementById('updatedRate').value;
    
            const requestData = {
              name: updatedDeveloperName,
              experience: updatedExperience,
              technology: updatedTechnology,
              resume: updatedResume,
              available: updatedAvailable,
              rate: updatedRate
            };
    
            fetch(`http://localhost:3000/developer/update-dev/${developerId}`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestData),
            })
              .then(response => response.json())
              .then(data => {
                handleApiResponse(data);
                fetchDevelopers();
                $('#updateDeveloperModal').modal('hide');
              })
              .catch(handleApiError);
          });
        }
    
        function deleteDeveloper(developerId) {
          fetch(`http://localhost:3000/developer/delete-dev/${developerId}`, {
            method: 'DELETE',
          })
            .then(response => response.json())
            .then(data => {
              handleApiResponse(data);
              fetchDevelopers();
            })
            .catch(handleError);
        }
    
        function handleApiResponse(data) {
          console.log(data);
        }
    
        function handleApiError(error) {
          console.error('API Request Error:', error);
        }
    
        function handleError(error) {
          console.error('Error:', error);
        }
      });

      const tokens = localStorage.getItem("vendorToken");
        
        if (!tokens) {
          // Redirect to the login page if the token is not present
          window.location.href = "/login";
        }

    </script>
    
      <!-- <script>

        document.addEventListener('DOMContentLoaded', function () {
          const toggleDeveloperFormButton = document.getElementById('toggleDeveloperForm');
          const developerFormContainer = document.getElementById('developerFormContainer');
          const createDeveloperForm = document.getElementById('createDeveloperForm');
          const developerTableBody = document.getElementById('developerTableBody');

    toggleDeveloperFormButton.addEventListener("click", toggleDeveloperForm);

    createDeveloperForm.addEventListener("submit", function (event) {
      event.preventDefault();
      addDeveloper();
    });

          // Fetch all developers and populate the table
          fetchDevelopers();

          function toggleDeveloperForm() {
            developerFormContainer.style.display = developerFormContainer.style.display === 'none' ? 'block' : 'none';
          }

          function fetchDevelopers() {
            fetch('http://localhost:3000/developer/get-devAll')
              .then(response => response.json())
              .then(data => {
                displayDevelopers(data.developers);
              })
              .catch(error => {
                console.error('Error fetching developers:', error);
              });
          }

          function displayDevelopers(developers) {
            developerTableBody.innerHTML = '';

            developers.forEach(developer => {
              const newRow = developerTableBody.insertRow(developerTableBody.rows.length);

              const cells = [
                developer._id,
                developer.name,
                developer.experience,
                developer.technology.join(', '), // Display technologies as a comma-separated list
                developer.resume,
                developer.available ? 'Yes' : 'No',
                developer.rate
              ];

              cells.forEach((cell, index) => {
                const newCell = newRow.insertCell(index);
                newCell.innerHTML = cell;
              });

              const actionCell = newRow.insertCell(cells.length);
              actionCell.innerHTML = '<button class="btn btn-warning" onclick="updateDeveloper(\'' + developer._id + '\')">Update</button>' +
                '<button class="btn btn-danger ml-2" onclick="deleteDeveloper(\'' + developer._id + '\')">Delete</button>';
            });
          }

          // function addDeveloper() {
          //   const developerName = document.getElementById('developerName').value;
          //   const experience = document.getElementById('experience').value;
          //   const technology = document.getElementById('technology').value.split(',').map(item => item.trim()); 
          //   const resume = document.getElementById('resume').value;
          //   const available = document.getElementById('available').checked;
          //   const rate = document.getElementById('rate').value;

          //   const requestData = {
          //     name: developerName,
          //     experience: experience,
          //     technology: technology,
          //     resume: resume,
          //     available: available,
          //     rate: rate
          //   };

          //   fetch('http://localhost:3000/developer/add-dev', {
          //     method: 'POST',
          //     headers: {
          //       'Content-Type': 'application/json',
          //     },
          //     body: JSON.stringify(requestData),
          //   })
          //     .then(response => response.json())
          //     .then(data => {
          //       handleApiResponse(data);
          //       // Fetch and display updated developers after adding
          //       fetchDevelopers();
          //       // Hide the form after submission
          //       toggleDeveloperForm();
          //     })
          //     .catch(error => {
          //       handleApiError(error);
          //     });
          // }
          function addDeveloper() {
            const developerName = document.getElementById('developerName').value;
            const experience = document.getElementById('experience').value;
            const technology = document.getElementById('technology').value.split(',').map(item => item.trim());
            const resume = document.getElementById('resume').value;
            const available = document.getElementById('available').checked;
            const rate = document.getElementById('rate').value;

            const requestData = {
              name: developerName,
              experience: experience,
              technology: technology,
              resume: resume,
              available: available,
              rate: rate
            };

            console.log('Request Data:', requestData);

            fetch('http://localhost:3000/developer/add-dev', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestData),
            })
              .then(response => response.json())
              .then(data => {
                handleApiResponse(data);
                // Fetch and display updated developers after adding
                fetchDevelopers();
                // Hide the form after submission
                toggleDeveloperForm();
              })
              .catch(error => {
                handleApiError(error);
              });
          }

          function updateDeveloper(developerId) {
            fetch(`http://localhost:3000/developer/get-dev/${developerId}`)
              .then(response => response.json())
              .then(data => {
                document.getElementById('updatedDeveloperName').value = data.developer.name;
                document.getElementById('updatedExperience').value = data.developer.experience;
                document.getElementById('updatedTechnology').value = data.developer.technology.join(', '); // Convert array to comma-separated string
                document.getElementById('updatedResume').value = data.developer.resume;
                document.getElementById('updatedAvailable').checked = data.developer.available;
                document.getElementById('updatedRate').value = data.developer.rate;

                // Show the updateDeveloperModal
                $('#updateDeveloperModal').modal('show');
              })
              .catch(error => {
                console.error('Error fetching developer details:', error);
              });

            // Handle form submission
            document.getElementById('updateDeveloperForm').addEventListener('submit', function (event) {
              event.preventDefault();

              const updatedDeveloperName = document.getElementById('updatedDeveloperName').value;
              const updatedExperience = document.getElementById('updatedExperience').value;
              const updatedTechnology = document.getElementById('updatedTechnology').value.split(',').map(item => item.trim()); // Convert comma-separated string to array
              const updatedResume = document.getElementById('updatedResume').value;
              const updatedAvailable = document.getElementById('updatedAvailable').checked;
              const updatedRate = document.getElementById('updatedRate').value;

              const requestData = {
                name: updatedDeveloperName,
                experience: updatedExperience,
                technology: updatedTechnology,
                resume: updatedResume,
                available: updatedAvailable,
                rate: updatedRate
              };

              fetch(`http://localhost:3000/developer/update-dev/${developerId}`, {
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(requestData),
              })
                .then(response => response.json())
                .then(data => {
                  handleApiResponse(data);
                  // Fetch and display updated developers after updating
                  fetchDevelopers();
                  // Hide the modal after submission
                  $('#updateDeveloperModal').modal('hide');
                })
                .catch(error => {
                  handleApiError(error);
                });
            });
          }

          function deleteDeveloper(developerId) {
            fetch(`http://localhost:3000/developer/delete-dev/${developerId}`, {
              method: 'DELETE',
            })
              .then(response => response.json())
              .then(data => {
                handleApiResponse(data);
                // Fetch and display updated developers after deletion
                fetchDevelopers();
              })
              .catch(error => {
                handleApiError(error);
              });
          }

          function handleApiResponse(data) {
            // Handle the API response here
            console.log(data);
            // You can update the UI or perform additional actions based on the response
          }

          function handleApiError(error) {
            console.error('API Request Error:', error);
            // Handle errors here
          }
        });
      </script> -->
